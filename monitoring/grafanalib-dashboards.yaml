apiVersion: v1
data:
  agents.py: |
    import yaml
    from grafanalib.core import (
        Alert, AlertCondition, Dashboard, Graph,
        GreaterThan, OP_AND, OPS_FORMAT, Row, Column, RTYPE_SUM, SECONDS_FORMAT,
        SHORT_FORMAT, single_y_axis, Target, TimeRange, YAxes, YAxis
    )

    nodes=[]

    with open("nodelist.yaml", 'r') as stream:
        nodes = yaml.safe_load(stream)

    dashboard = Dashboard(
        title="Agents",
        uid=__file__.split('/')[-1:][0].replace('.py', ''),
        rows=[
          Row(panels=[
            Graph(
              title="{}".format(i),
              dataSource='Prometheus',
              targets=[
                Target(
                    expr='process_resident_memory_bytes{{job="all",instance="{}"}}'.format(i),
                    refId='A',
                ),
              ],
            )
          ]) for i in nodes
        ],
    ).auto_panel_ids()
  bargauges-by-type.py: |
    import yaml
    from grafanalib.core import (
        Alert, AlertCondition, Dashboard, Graph, BarGauge, GaugePanel,
        GreaterThan, OP_AND, OPS_FORMAT, Row, Column, RTYPE_SUM, SECONDS_FORMAT,
        SHORT_FORMAT, single_y_axis, Target, TimeRange, YAxes, YAxis
    )

    nodes=[]

    with open("nodelist.yaml", 'r') as stream:
        nodes = yaml.safe_load(stream)

    dashboard = Dashboard(
        title="BarGauges by type",
        uid=__file__.split('/')[-1:][0].replace('.py', ''),
        rows=[
          Row(panels=[
            BarGauge(
              title=f"CPU",
              height=1200,
              span=12,
              dataSource='Prometheus',
              targets=[
                Target(
                    expr=f'(((count(count(node_cpu_seconds_total{{instance=~"{instance}",job=~"all"}}) by (cpu))) - avg(sum by (mode)(irate(node_cpu_seconds_total{{mode="idle",instance=~"{instance}",job=~"all"}}[5m])))) * 100) / count(count(node_cpu_seconds_total{{instance=~"{instance}",job=~"all"}}) by (cpu))',
                    legendFormat=f'{instance}',
                    instant=True,
                ) for instance in nodes
              ],
            ),
          ]),
          Row(panels=[
            BarGauge(
              title=f"Memory",
              height=1200,
              span=12,
              dataSource='Prometheus',
              targets=[
                Target(
                    expr=f'100 - ((node_memory_MemAvailable_bytes{{instance=~"{instance}",job=~"all"}} * 100) / node_memory_MemTotal_bytes{{instance=~"{instance}",job=~"all"}})',
                    legendFormat=f'{instance}',
                    instant=True,
                ) for instance in nodes
              ],
            ),
          ]),
          Row(panels=[
            BarGauge(
              title=f"Disk",
              height=1200,
              span=12,
              dataSource='Prometheus',
              targets=[
                Target(
                    expr=f'100 - ((node_filesystem_avail_bytes{{instance=~"{instance}",job=~"all",mountpoint="/",fstype!="rootfs"}} * 100) / node_filesystem_size_bytes{{instance=~"{instance}",job=~"all",mountpoint="/",fstype!="rootfs"}})',
                    legendFormat=f'{instance}',
                    instant=True,
                ) for instance in nodes
              ],
            ),
          ])
        ],
    ).auto_panel_ids()
  bargauges-cpu.py: |
    import yaml
    from grafanalib.core import (
        Alert, AlertCondition, Dashboard, Graph, BarGauge, GaugePanel,
        GreaterThan, OP_AND, OPS_FORMAT, Row, Column, RTYPE_SUM, SECONDS_FORMAT,
        SHORT_FORMAT, single_y_axis, Target, TimeRange, YAxes, YAxis
    )

    nodes=[]

    with open("nodelist.yaml", 'r') as stream:
        nodes = yaml.safe_load(stream)

    dashboard = Dashboard(
        title="BarGauges CPU",
        uid=__file__.split('/')[-1:][0].replace('.py', ''),
        rows=[
          Row(panels=[
            BarGauge(
              title=f"CPU",
              height=1200,
              span=12,
              dataSource='Prometheus',
              targets=[
                Target(
                    expr=f'(((count(count(node_cpu_seconds_total{{instance=~"{instance}",job=~"all"}}) by (cpu))) - avg(sum by (mode)(irate(node_cpu_seconds_total{{mode="idle",instance=~"{instance}",job=~"all"}}[5m])))) * 100) / count(count(node_cpu_seconds_total{{instance=~"{instance}",job=~"all"}}) by (cpu))',
                    legendFormat=f'{instance}',
                    instant=True,
                ) for instance in nodes
              ],
            ),
          ]),
        ],
    ).auto_panel_ids()
  bargauges-disk.py: |
    import yaml
    from grafanalib.core import (
        Alert, AlertCondition, Dashboard, Graph, BarGauge, GaugePanel,
        GreaterThan, OP_AND, OPS_FORMAT, Row, Column, RTYPE_SUM, SECONDS_FORMAT,
        SHORT_FORMAT, single_y_axis, Target, TimeRange, YAxes, YAxis
    )

    nodes=[]

    with open("nodelist.yaml", 'r') as stream:
        nodes = yaml.safe_load(stream)

    dashboard = Dashboard(
        title="BarGauges Disk",
        uid=__file__.split('/')[-1:][0].replace('.py', ''),
        rows=[
          Row(panels=[
            BarGauge(
              title=f"Disk",
              height=1200,
              span=12,
              dataSource='Prometheus',
              targets=[
                Target(
                    expr=f'100 - ((node_filesystem_avail_bytes{{instance=~"{instance}",job=~"all",mountpoint="/",fstype!="rootfs"}} * 100) / node_filesystem_size_bytes{{instance=~"{instance}",job=~"all",mountpoint="/",fstype!="rootfs"}})',
                    legendFormat=f'{instance}',
                    instant=True,
                ) for instance in nodes
              ],
            ),
          ])
        ],
    ).auto_panel_ids()
  bargauges-memory.py: |
    import yaml
    from grafanalib.core import (
        Alert, AlertCondition, Dashboard, Graph, BarGauge, GaugePanel,
        GreaterThan, OP_AND, OPS_FORMAT, Row, Column, RTYPE_SUM, SECONDS_FORMAT,
        SHORT_FORMAT, single_y_axis, Target, TimeRange, YAxes, YAxis
    )

    nodes=[]

    with open("nodelist.yaml", 'r') as stream:
        nodes = yaml.safe_load(stream)

    dashboard = Dashboard(
        title="BarGauges Memory",
        uid=__file__.split('/')[-1:][0].replace('.py', ''),
        rows=[
          Row(panels=[
            BarGauge(
              title=f"Memory",
              height=1200,
              span=12,
              dataSource='Prometheus',
              targets=[
                Target(
                    expr=f'100 - ((node_memory_MemAvailable_bytes{{instance=~"{instance}",job=~"all"}} * 100) / node_memory_MemTotal_bytes{{instance=~"{instance}",job=~"all"}})',
                    legendFormat=f'{instance}',
                    instant=True,
                ) for instance in nodes
              ],
            ),
          ]),
        ],
    ).auto_panel_ids()
  bargauges.py: |
    import yaml
    from grafanalib.core import (
        Alert, AlertCondition, Dashboard, Graph, BarGauge, GaugePanel,
        GreaterThan, OP_AND, OPS_FORMAT, Row, Column, RTYPE_SUM, SECONDS_FORMAT,
        SHORT_FORMAT, single_y_axis, Target, TimeRange, YAxes, YAxis
    )

    nodes=[]

    with open("nodelist.yaml", 'r') as stream:
        nodes = yaml.safe_load(stream)

    dashboard = Dashboard(
        title="BarGauges",
        uid=__file__.split('/')[-1:][0].replace('.py', ''),
        rows=[
          Row(panels=[
            BarGauge(
              title=f"{instance}",
              dataSource='Prometheus',
              targets=[
                Target(
                    expr=f'(((count(count(node_cpu_seconds_total{{instance=~"{instance}",job=~"all"}}) by (cpu))) - avg(sum by (mode)(irate(node_cpu_seconds_total{{mode="idle",instance=~"{instance}",job=~"all"}}[5m])))) * 100) / count(count(node_cpu_seconds_total{{instance=~"{instance}",job=~"all"}}) by (cpu))',
                    refId='A',
                    legendFormat='CPU',
                    instant=True,
                ),
                Target(
                    expr=f'100 - ((node_memory_MemAvailable_bytes{{instance=~"{instance}",job=~"all"}} * 100) / node_memory_MemTotal_bytes{{instance=~"{instance}",job=~"all"}})',
                    legendFormat='Memory',
                    instant=True,
                ),
                Target(
                    expr=f'100 - ((node_filesystem_avail_bytes{{instance=~"{instance}",job=~"all",mountpoint="/",fstype!="rootfs"}} * 100) / node_filesystem_size_bytes{{instance=~"{instance}",job=~"all",mountpoint="/",fstype!="rootfs"}})',
                    legendFormat='Disk',
                    instant=True,
                ),
              ],
            ),
          ]) for instance in nodes
        ],
    ).auto_panel_ids()
  example-dashboard.py: |
    from grafanalib.core import (
        Alert, AlertCondition, Dashboard, Graph,
        GreaterThan, OP_AND, OPS_FORMAT, Row, RTYPE_SUM, SECONDS_FORMAT,
        SHORT_FORMAT, single_y_axis, Target, TimeRange, YAxes, YAxis
    )

    dashboard = Dashboard(
        title="Frontend Stats",
        uid=__file__.split('/')[-1:][0].replace('.py', ''),
        rows=[
            Row(panels=[
              Graph(
                  title="Frontend QPS",
                dataSource='Prometheus',
                targets=[
                    Target(
                        expr='sum(irate(nginx_http_requests_total{job="default/frontend",status=~"1.."}[1m]))',
                        legendFormat="1xx",
                        refId='A',
                    ),
                    Target(
                        expr='sum(irate(nginx_http_requests_total{job="default/frontend",status=~"2.."}[1m]))',
                        legendFormat="2xx",
                        refId='B',
                    ),
                    Target(
                        expr='sum(irate(nginx_http_requests_total{job="default/frontend",status=~"3.."}[1m]))',
                        legendFormat="3xx",
                        refId='C',
                    ),
                    Target(
                        expr='sum(irate(nginx_http_requests_total{job="default/frontend",status=~"4.."}[1m]))',
                        legendFormat="4xx",
                        refId='D',
                    ),
                    Target(
                        expr='sum(irate(nginx_http_requests_total{job="default/frontend",status=~"5.."}[1m]))',
                        legendFormat="5xx",
                        refId='E',
                    ),
                ],
                yAxes=YAxes(
                    YAxis(format=OPS_FORMAT),
                    YAxis(format=SHORT_FORMAT),
                ),
                alert=Alert(
                    name="Too many 500s on Nginx",
                    message="More than 5 QPS of 500s on Nginx for 5 minutes",
                    alertConditions=[
                        AlertCondition(
                            Target(
                                expr='sum(irate(nginx_http_requests_total{job="default/frontend",status=~"5.."}[1m]))',
                                legendFormat="5xx",
                                refId='A',
                            ),
                            timeRange=TimeRange("5m", "now"),
                            evaluator=GreaterThan(5),
                            operator=OP_AND,
                            reducerType=RTYPE_SUM,
                        ),
                    ],
                )
                ),
              Graph(
                  title="Frontend latency",
                  dataSource='Prometheus',
                  targets=[
                      Target(
                        expr='histogram_quantile(0.5, sum(irate(nginx_http_request_duration_seconds_bucket{job="default/frontend"}[1m])) by (le))',
                        legendFormat="0.5 quantile",
                        refId='A',
                      ),
                      Target(
                          expr='histogram_quantile(0.99, sum(irate(nginx_http_request_duration_seconds_bucket{job="default/frontend"}[1m])) by (le))',
                          legendFormat="0.99 quantile",
                          refId='B',
                      ),
                  ],
                  yAxes=single_y_axis(format=SECONDS_FORMAT),
              ),
            ]),
        ],
    ).auto_panel_ids()
  gauges.py: |
    import yaml
    from grafanalib.core import (
        Alert, AlertCondition, Dashboard, Graph, Gauge, GaugePanel,
        GreaterThan, OP_AND, OPS_FORMAT, Row, Column, RTYPE_SUM, SECONDS_FORMAT,
        SHORT_FORMAT, single_y_axis, Target, TimeRange, YAxes, YAxis
    )

    nodes=[]

    with open("nodelist.yaml", 'r') as stream:
        nodes = yaml.safe_load(stream)

    dashboard = Dashboard(
        title="Gauges",
        uid=__file__.split('/')[-1:][0].replace('.py', ''),
        rows=[
          Row(panels=[
            GaugePanel(
              title=f"{instance}",
              dataSource='Prometheus',
              targets=[
                Target(
                    expr=f'(((count(count(node_cpu_seconds_total{{instance=~"{instance}",job=~"all"}}) by (cpu))) - avg(sum by (mode)(irate(node_cpu_seconds_total{{mode="idle",instance=~"{instance}",job=~"all"}}[5m])))) * 100) / count(count(node_cpu_seconds_total{{instance=~"{instance}",job=~"all"}}) by (cpu))',
                    refId='A',
                    legendFormat='CPU',
                    instant=True,
                ),
                Target(
                    expr=f'100 - ((node_memory_MemAvailable_bytes{{instance=~"{instance}",job=~"all"}} * 100) / node_memory_MemTotal_bytes{{instance=~"{instance}",job=~"all"}})',
                    legendFormat='Memory',
                    instant=True,
                ),
                Target(
                    expr=f'100 - ((node_filesystem_avail_bytes{{instance=~"{instance}",job=~"all",mountpoint="/",fstype!="rootfs"}} * 100) / node_filesystem_size_bytes{{instance=~"{instance}",job=~"all",mountpoint="/",fstype!="rootfs"}})',
                    legendFormat='Disk',
                    instant=True,
                ),
              ],
            ),
          ]) for instance in nodes
        ],
    ).auto_panel_ids()
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: grafanalib-dashboards
